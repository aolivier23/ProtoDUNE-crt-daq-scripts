#!/usr/bin/expect -f
#Brief: Tcl/Expect script functions for interacting with the CRT 
#       Low Voltage (LV) power supply via telnet.  Some of these 
#       functions turn components on and off with no checks on 
#       which channels are powered on, so be very careful if
#       using them.
#Usage: from a Tcl/Expect script: 
#       source [file join [file dirname [info script]] CRTLV.exp]       
#Author: Originally generated by autoexcept as described below, 
#        but modified and maintained by 
#        Andrew Olivier aolivier@ur.rochester.edu


#I don't normally work in Tcl, so I used this reference to learn how 
#to write functions: https://www.tcl.tk/man/tcl8.5/tutorial/Tcl11.html

#Connect to a CRT power supply and return its spawn ID for later access.  
proc connect {host {port 5024}} {
  spawn telnet $host $port
  set thisID $spawn_id

  match_max 100000
  expect -re "Trying \\d{3}\\.\\d\\.\\d\\.\\d\\.\\.\\.\r\r\n"
  expect -exact "Connected to $host.\r\r\n"
  expect -re "Escape character is '(.*)'\.\r\r\n"
  #set escapeChar $expect_out(1,string) #TODO: What happens if supplies have different escape characters?  
  expect -exact "Agilent N6700B Low-Profile MPS Mainframe\r
  \r
  SCPI> "

  return $thisID
}

#Disconnect from a CRT power supply
proc disConnect {{spawnID $spawn_id}} {
  send -i $spawnID -- "^]\r"
  expect -i $spawnID -exact "\r
  telnet> "
  send -i $spawnID -- "quit\r"
  expect -i $spawnID eof
}

#Ask the hardware how many channels are currently "in use" for this supply/mainframe
proc getNChannels {{spawnID $spawn_id}} {
  send -i $spawnID -- "system:channel:count?\r"
  expect -i $spawnID -re "\\+(.*)\r\n"
  set nChannels $expect_out(1,string)
  expect -i $spawnID "\r
  SCPI> "
  return $nChannels
}

#Print header identifying channels.  Number of spaces determined empirically.
proc printHeader {nChannels} {
  send_user "#"
  for {set channel 1} {$channel<=$nChannels} {incr channel} {
    send_user "channel $channel     "
  }
  send_user "\n"
}

#Report the voltages and currents on a CRT LV supply.  Produces a report of the 
#following format that is hopefully easy to parse with a variety of tools:
#
##channel 1     channel 2     channel 3     channel 4     
#+6.099355E+00 +6.296141E+00 +6.293590E+00 +4.997325E+00 
#+2.110040E+00 +2.486488E+00 +2.477114E+00 +5.474620E-01 
#
proc report {nChannels quantity {spawnID $spawn_id}} {
  #Measure voltages
  set command "meas:$quantity? (@1:$nChannels)"
  send -i $spawnID -- "$command"
  expect -i $spawnID -exact "$command\r\n"
  send -i $spawnID -- "\r"
  expect -i $spawnID -exact "\r\n"
  
  #Build a regular expression to match to with exactly the right number of subexpressions
  set regExpr "(.*)"
  for {set channel 1} {$channel<$nChannels} {incr channel} {
    append regExpr ",(.*)"
  }
  append regExpr "\r\n(.+)"

  #Look at the output from SCPI and print out the voltages of the CRT supply channel if found.  
  #Print an error message if no voltages found to help with debugging.  
  expect {
    -i $spawnID -re $regExpr { 
      for {set channel 1} {$channel<=$nChannels} {incr channel} {
        send_user " $expect_out($channel,string)"; 
      }
      send_user "\n"
    }
    timeout -i $spawnID { send_user "Couldn't find $quantity from SCPI output with command $command!  
                                     Parsed output \n$expect_out(0,buffer)\n with regular expression\n
                                     $regExpr\n"; }
  }

  expect -i $spawnID  "\r
  SCPI> "
  return 0
}

#Toggle power for an SCPI channel list.  This function does NOT enforce 
#the right order for powering off channels, so be very careful how 
#you use it.  
proc toggleChannels {spawnID channels onOff} {
  #send_user "Sending command $onOff to $spawnID for channels (@$channels)\n"
  set command "output $onOff, (@$channels)"
  send -i $spawnID -- "$command"
  expect -i $spawnID -exact "$command\r\n"
  send -i $spawnID -- "\r"
  expect -i $spawnID -exact "\r\n"
  
  expect -i $spawnID "\r
  SCPI> "

  #Give the channel some time to reach full voltage.
  #There's probably some way I could make expect do this, but 
  #I don't have time to figure it out.  
  sleep 3

  return 0
}
