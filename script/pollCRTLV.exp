#!/usr/bin/expect -f
#Usage: pollCRTLV.exp [host] [port]
#Brief: Poll a CRT low voltage supply for the voltage and current 
#       of each channel.  Output looks like:
#
##channel 1     channel 2     channel 3     channel 4     
#+6.099355E+00 +6.296141E+00 +6.293590E+00 +4.997325E+00 
#+2.110040E+00 +2.486488E+00 +2.477114E+00 +5.474620E-01 
#
#       Where the first row is voltage in volts, and the second row is 
#       current in amps.  The output goes to stdout which can be redirected 
#       to a file like: 
#
#       pollCRTLV.exp &> ps-001-status.txt
#
#       The output format is intended to be easy to parse as space-separated 
#       parameters.  This might be useful if some external application that 
#       doesn't want to interact with telnet directly wants to poll the status 
#       of the CRT LV supply every few minutes.  Be aware that this script takes 
#       a few seconds to run.  
#
#       If you're logged into the CRT server, then  useful hosts are:
#
#       np04-ps-crt-01 #The default
#       np04-ps-crt-02
#
#       And you should leave port as it's default value of 5024.  
#
#       If you want to use this script from another computer, 
#       you need to tunnel port 5024 from the power supply that 
#       you want to use from the CRT server:
#
#       ssh -L 5025:NP04-PS-CRT-01.cern.ch:5024 np04daq@np04-crt-001.cern.ch
#
#       Then, you would use this script as:
#
#       pollCRTLV.exp localhost 5025
       
#Author: Originally generated by autoexcept as described below, 
#        but modified and maintained by 
#        Andrew Olivier aolivier@ur.rochester.edu

#Include functions common to interactions with CRT LV supplies
source [file join [file dirname [info script]] CRTLV.exp]

#
# This Expect script was generated by autoexpect on Tue Nov 13 09:33:10 2018
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don

#Set the time to wait before timing out on a command
set timeout 2
#exp_internal 1 #Enable debugging output

#Parameters for which host to connect to.  I'll write a wrapper that abstracts this away to "which supply to connect to"
if {$argc < 1} {set host "np04-ps-crt-01";} else {set host [lindex $argv 0];}

if {$argc < 2} {set port 5024;} else {set port [lindex $argv 1];}

if {$argc > 2} {
  send_user "Usage: pollCRTLV.exp [host] [port]\n";
  exit 1;
}

#Stop SCPI/telnet's output from going to the user's stdout
log_user 0

#Connect to power supply and obtain information about how many channels it's using
set supply [connect $host $port]
set nChannels [getNChannels $supply]

#Report voltages and currents for this supply to stdout
printHeader $nChannels
report $nChannels "volt" $supply
report $nChannels "curr" $supply

#Clean up
disConnect $supply
