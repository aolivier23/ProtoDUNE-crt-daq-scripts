#!/usr/bin/expect -f
#Usage: turnOnCRTLV.exp
#Brief: Turn the CRT Low Voltage (LV) on in the "correct" order.  
#       It's important to maintain the order of power on commands 
#       in this script to protect the hardware from potential problems.  
#
#       Because this script has to interact with both LV power supplies, 
#       it doesn't take host and port arguments like pollLV.exp.  So, 
#       you must be logging into the CRT server to use this script for
#       now. 
#
       
#Author: Originally generated by autoexcept as described below, 
#        but modified and maintained by 
#        Andrew Olivier aolivier@ur.rochester.edu

source [file join [file dirname [info script]] CRTLV.exp]

#
# This Expect script was generated by autoexpect on Tue Nov 13 09:33:10 2018
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don

#Set the time to wait before timing out on a command
set timeout 2
log_user 0
#exp_internal 1 #Enable debugging output

#Validate command line parameters
if {$argc != 0} {
  send_user "Usage: turnOnCRTLV.exp\n";
  exit 1;
}

#Connect to each power supply
set topSupply [connect np04-ps-crt-01]
set bottomSupply [connect np04-ps-crt-02]

send_user "Turning on the CRT Low Voltage\n";

#Power on CRT channels in the correct order.  This order is currently:
#
#Channel:      1 2 3 4
#************************
#topSupply:    2 3
#bottomSupply: 1 4 5 6
#
#bottomSupply's channel 4 controls the USB readout boards that read data from each 
#daisy chain.  The USB readout boards could have trouble if they ever "see" a detector 
#that is turned off, so we turn them off first.  bottomSupply's channel 1 powers the 
#CRT clock and sync fanout.  The detector boards can have hardware problems if they 
#suddenly lose clock and sync signals, so this channel is turned off last.  The 4 
#daisy chain LV distributors can be turned off in any order. 
toggleChannels $bottomSupply 1 "ON"
toggleChannels $topSupply    "1:2" "ON"
toggleChannels $bottomSupply "2:3" "ON"
toggleChannels $bottomSupply 4 "ON"

#send -- "$escapeChar\r"
#TODO: Figure out what the escape character is for each supply
disConnect $topSupply
disConnect $bottomSupply
